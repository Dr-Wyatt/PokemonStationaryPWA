{"version":3,"sources":["components/Lists.tsx","components/Counter.tsx","components/Details.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["pokemonList","val","Lists","map","i","key","to","Counter","children","useState","count","setCount","Details","pokemonParam","match","params","pokemon","console","log","pokemonMoves","paramPokemon","move","pp1","pp2","setPokemon","pokemonMovesArray","Object","keys","onClick","App","path","exact","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4QAGMA,EAAa,CACf,CAAEC,IAAK,YACP,CAAEA,IAAK,UACP,CAAEA,IAAK,WAqBIC,EAlBS,WAEpB,OACI,6BACKF,EAAYG,KAAI,WAAUC,GAAV,IAAGH,EAAH,EAAGA,IAAH,OACb,yBAAKI,IAAKD,GACN,6BACI,kBAAC,IAAD,CAAME,GAAE,WAAML,IACd,4BAAKA,W,eCgBdM,EAZkB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAOrBC,oBAAU,GAPW,mBAOxCC,EAPwC,KAOjCC,EAPiC,KAS/C,OAAO,6BAAMH,EAAS,CAACE,QAAOC,eCwFnBC,EAhGkB,SAAC,GAAe,IAEvCC,EAFsC,EAAZC,MAELC,OAAOC,QAClCC,QAAQC,IAAIL,GAEZ,IAsDMM,EAtDa,SAACC,GAEhB,OAAQA,GACJ,IAAK,WAUD,MATgB,CACZ,SAAY,CAER,CAAEC,KAAM,eAAgBC,IAAK,EAAGC,IAAK,GACrC,CAAEF,KAAM,gBAAiBC,IAAK,EAAGC,IAAK,GACtC,CAAEF,KAAM,cAAeC,IAAK,GAAIC,IAAK,IACrC,CAAEF,KAAM,eAAgBC,IAAK,EAAGC,IAAK,KAKjD,IAAK,SAUD,MATgB,CACZ,OAAU,CAEN,CAAEF,KAAM,eAAgBC,IAAK,EAAGC,IAAK,GACrC,CAAEF,KAAM,aAAcC,IAAK,GAAIC,IAAK,IACpC,CAAEF,KAAM,cAAeC,IAAK,GAAIC,IAAK,IACrC,CAAEF,KAAM,QAASC,IAAK,GAAIC,IAAK,MAK3C,IAAK,SAUD,MATgB,CACZ,OAAU,CAEN,CAAEF,KAAM,eAAgBC,IAAK,EAAGC,IAAK,GACrC,CAAEF,KAAM,aAAcC,IAAK,GAAIC,IAAK,IACpC,CAAEF,KAAM,cAAeC,IAAK,GAAIC,IAAK,IACrC,CAAEF,KAAM,QAASC,IAAK,GAAIC,IAAK,MAK3C,QAUI,MATgB,CACZ,QAAW,CAEP,CAAEF,KAAM,SAAUC,IAAK,EAAGC,IAAK,GAC/B,CAAEF,KAAM,SAAUC,IAAK,EAAGC,IAAK,GAC/B,CAAEF,KAAM,SAAUC,IAAK,EAAGC,IAAK,GAC/B,CAAEF,KAAM,SAAUC,IAAK,EAAGC,IAAK,MAQXC,CAAWX,GAC7CY,EAAoBN,EAAaN,GAAgBa,OAAOC,KAAKR,GAAc,GAAKN,EAAe,WAGrG,OACI,6BACI,4BACKA,GAEL,6BACKY,EAAkBtB,KAAI,WAAWC,GAAX,IAAGiB,EAAH,EAAGA,KAAH,OACnB,6BACI,4BAAKA,GACL,kBAAC,EAAD,MACK,gBAAGX,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACG,6BACI,6BACI,4BAAQiB,QAAS,kBAAMjB,EAASD,EAAQ,KAAxC,IAA6C,mCAEjD,6BACI,6BAAe,GAAVA,EAAcA,EAAQe,EAAkBrB,GAAGkB,IAAMZ,EAAtD,MAAgEe,EAAkBrB,GAAGmB,MAEzF,6BACI,4BAAQK,QAAS,kBAAMjB,EAASD,EAAQ,KAAI,8CCzFrEmB,MATf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW9B,IACjC,kBAAC,IAAD,CAAO4B,KAAK,YAAYC,OAAK,EAACC,UAAWpB,MCEzCqB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvB,MACvB,2DA8CN,SAASwB,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BlC,QAAQC,IACN,iHAKEsB,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlB5B,QAAQC,IAAI,sCAGRsB,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAC,GACLtC,QAAQsC,MAAM,4CAA6CA,MClGjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiBnB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIoB,IACpBC,GACA3B,OAAOC,SAAS2B,MAEJC,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,GAAN,sBAEP7B,IAgEV,SAAiCM,EAAeC,GAE9C0B,MAAM3B,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BT,OAAOC,SAASuC,eAKpBrC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLrC,QAAQC,IACN,oEAvFA0D,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjC3B,QAAQC,IACN,iHAMJoB,EAAgBC,EAAOC,OC1C/BE,K","file":"static/js/main.d14d3597.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst pokemonList= [\r\n    { val: 'Giratina' },\r\n    { val: 'Dialga' },\r\n    { val: 'Palkia' }\r\n];\r\n\r\nconst Lists: React.FC = () => {\r\n\r\n    return (\r\n        <div>\r\n            {pokemonList.map(({ val }, i) => (\r\n                <div key={i}>\r\n                    <div>\r\n                        <Link to={`/${val}`}>\r\n                        <h2>{val}</h2>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Lists;","import React, { useState } from \"react\";\r\n\r\ninterface moves {\r\n    move: string,\r\n    pp1: number,\r\n    pp2: number\r\n};\r\n\r\ninterface movesList extends Array<moves> { };\r\n\r\ninterface movesListWithName extends Record<string, movesList> {\r\n    [key: string]: movesList\r\n};\r\n\r\ninterface Props {\r\n    children: (data: {\r\n        count: number;\r\n        setCount: React.Dispatch<React.SetStateAction<number>>;\r\n    }) => JSX.Element | null;\r\n}\r\n\r\nconst Counter: React.FC<Props> = ({ children }) => {\r\n\r\n    // const movesList = useSetMoves();\r\n    // const params = useParams();\r\n    // console.log(params);\r\n    // console.log(movesList);\r\n    \r\n    const [count, setCount] = useState(-1);\r\n\r\n    return <div>{children({count, setCount})}</div>\r\n}\r\n\r\nexport default Counter;","import React from 'react';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport Counter from './Counter';\r\n\r\ninterface moves {\r\n    move: string,\r\n    pp1: number,\r\n    pp2: number\r\n};\r\n\r\ninterface movesList extends Array<moves> { };\r\n\r\ninterface movesListWithName extends Record<string, movesList> {\r\n    [key: string]: movesList\r\n};\r\n\r\n\r\ninterface Props extends RouteComponentProps<{\r\n    pokemon: string;\r\n\r\n}> { }\r\n\r\nconst Details: React.FC<Props> = ({ match }) => {\r\n\r\n    const pokemonParam = match.params.pokemon\r\n    console.log(pokemonParam);\r\n\r\n    const setPokemon = (paramPokemon: string) => {\r\n\r\n        switch (paramPokemon) {\r\n            case \"Giratina\": {\r\n                const Pokemon = {\r\n                    \"Giratina\": [\r\n\r\n                        { move: \"Ominous Wind\", pp1: 5, pp2: 5 },\r\n                        { move: \"Ancient Power\", pp1: 5, pp2: 5 },\r\n                        { move: \"Dragon Claw\", pp1: 15, pp2: 15 },\r\n                        { move: \"Shadow Force\", pp1: 5, pp2: 5 }\r\n                    ]\r\n                };\r\n                return Pokemon\r\n            }\r\n            case \"Dialga\": {\r\n                const Pokemon = {\r\n                    \"Dialga\": [\r\n\r\n                        { move: \"Roar of Time\", pp1: 5, pp2: 5 },\r\n                        { move: \"Heal Block\", pp1: 15, pp2: 15 },\r\n                        { move: \"Earth Power\", pp1: 10, pp2: 10 },\r\n                        { move: \"Slash\", pp1: 20, pp2: 20 }\r\n                    ]\r\n                };\r\n                return Pokemon\r\n            }\r\n            case \"Palkia\": {\r\n                const Pokemon = {\r\n                    \"Palkia\": [\r\n\r\n                        { move: \"Spacial Rend\", pp1: 5, pp2: 5 },\r\n                        { move: \"Heal Block\", pp1: 15, pp2: 15 },\r\n                        { move: \"Earth Power\", pp1: 10, pp2: 10 },\r\n                        { move: \"Slash\", pp1: 20, pp2: 20 }\r\n                    ]\r\n                };\r\n                return Pokemon\r\n            }\r\n            default: {\r\n                const Default = {\r\n                    \"Default\": [\r\n\r\n                        { move: \"Move 1\", pp1: 5, pp2: 5 },\r\n                        { move: \"Move 2\", pp1: 5, pp2: 5 },\r\n                        { move: \"Move 3\", pp1: 5, pp2: 5 },\r\n                        { move: \"Move 4\", pp1: 5, pp2: 5 }\r\n                    ]\r\n                };\r\n                return Default;\r\n            }\r\n        }\r\n    }\r\n\r\n    const pokemonMoves: movesListWithName = setPokemon(pokemonParam);\r\n    const pokemonMovesArray = pokemonMoves[pokemonParam == Object.keys(pokemonMoves)[0] ? pokemonParam : \"Default\"];\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>\r\n                {pokemonParam}\r\n            </h1>\r\n            <div>\r\n                {pokemonMovesArray.map(({ move }, i) => (\r\n                    <div>\r\n                        <h3>{move}</h3>\r\n                        <Counter>\r\n                            {({ count, setCount }) => (\r\n                                <div>\r\n                                    <div>\r\n                                        <button onClick={() => setCount(count - 1)}> <h2>-</h2></button>\r\n                                    </div>\r\n                                    <div>\r\n                                        <h3>{count == -1 ? count = pokemonMovesArray[i].pp1 : count} / {pokemonMovesArray[i].pp2}</h3>\r\n                                    </div>\r\n                                    <div>\r\n                                        <button onClick={() => setCount(count + 1)}><h2>+</h2></button>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            )}\r\n                        </Counter>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Details;","import React from 'react';\nimport './App.css';\nimport Lists from './components/Lists';\nimport {BrowserRouter, Route } from 'react-router-dom';\nimport Details from './components/Details';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Route path=\"/\" exact component={Lists}/>\n      <Route path=\"/:pokemon\" exact component={Details}/>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}